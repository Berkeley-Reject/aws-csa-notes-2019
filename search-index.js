var searchIndex = JSON.parse('{\
"kernel":{"doc":"<code>rust-kernel-riscv</code> is an open-source project that â€¦","t":"FFFAAAAAAAOOFAAAAADLLLLFLLLLRRRRRRRRCHDCMFFLLALLAFLFAFCLLLCDLLLLMMLLLLLLLMLMMLWWNENNDFFLLLLLLLLLLLLFMFLLLLLLFIDLLLLLMKLKLLLLCCCACDHMFFFFFLLLLFFFLFLLLFDHLLLLLFLLLLLCCCCCCCCCACAAFAAACCCCCAAAARDLLLLLLLMLLLLLLLLLLLLLLLRDDDLMLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLRDLLLLLMLLLLLLLLLLLLLLLLLLLLRDLLLLMLLLLLLLLLLLLLLLLLLLLDIDHDMFFKLFLLLLLLKLFMLLMLMMLLLFLLLLFKLLLLLLLLLLLHHFFFFFFFSSSSDDDRRRDDDSSSSSLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNDDDDHDERRRDDSSSSMFFLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLFFLLLLMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLMLMLLLLLLMMLLLLLLLFFLLMLLLMLMLLLLFFLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLMMMLLLLRRRRFFFFFCCCCAACWSDDDGDDDRRRLLLLLLLLLLLMLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLFDDLLLLMLLLLLLLLMMLLMLLLLLLLWRRRRRRRRDLLLLALLALLLLLLLLMALLLWRRWDHCCCMFFLLLLFLAAAALLLHDGDDMFFLFLLLLLLLMLLLLLLLLLLLMMLLLLLLLLLHDDDNENMFFLLLLLLLLLMLLLLLLLMLLLMLLLLLFFLLLLLLLLLMLLMLMFLLLLMLMMLMLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLMLLLLLMLMMMLLLLLLLMMLLGDLLLLMLLLMLLLRFFF","n":["bss_end","bss_start","clear_bss","console","constant","executor","file","lang_items","logging","mem","print","println","rust_main","sbi","sync","syscall","task","timer","Console","borrow","borrow_mut","from","into","print","try_from","try_into","type_id","write_str","CLOCK_FREQ","KERNEL_HEAP_SIZE","MEM_LIMIT","PAGE_SIZE","PAGE_SIZE_BIT","TRAMPOLINE","TRAP_CONTEXT_BASE","USER_STACK_SIZE","ControlFlow","LAZY","SCHEDULER","TrapContext","__private_field","__stability","__static_ref_initialize","borrow","borrow_mut","context","deref","from","future","init","into","run_until_complete","scheduler","spawn","spawn_thread","try_from","try_into","type_id","yield_now","TrapContext","borrow","borrow_mut","from","into","kernel_satp","kernel_stack","set_user_register","set_user_sepc","set_user_status","try_from","try_into","type_id","user_register","user_register","user_sepc","user_sepc","user_sstatus","user_status","","","Continue","ControlFlow","Exit","Yield","YieldFuture","_enter_kernel_space","_enter_user_space","borrow","borrow","borrow_mut","borrow_mut","eq","from","from","into","into","into_future","new","poll","spawn_thread","state","thread_loop","try_from","try_from","try_into","try_into","type_id","type_id","yield_now","Scheduler","TaskQueue","borrow","borrow_mut","from","into","new","queue","schedule","schedule","task","task","try_from","try_into","type_id","get_bin","get_bin_count","get_bin_data","load","print_bin_name","BIN_NAME_LIST","LAZY","__private_field","__stability","__static_ref_initialize","_bin_address","_bin_count","_bin_name","borrow","borrow_mut","deref","from","get_bin","get_bin_count","get_bin_data","into","print_bin_name","try_from","try_into","type_id","panic","KernelLogger","LOGGER","borrow","borrow_mut","enabled","flush","from","init","into","log","try_from","try_into","type_id","FrameNumber","KERNEL_SPACE","KERNEL_SPACE","MapPermission","PageNumber","PageSet","PhysicalAddress","UserPtr","VirtualAddress","address","deallocate_frame","frame_allocator","heap_allocator","init","page_table","segment","user_ptr","FrameNumber","PageNumber","PageRange","PhysicalAddress","VirtualAddress","frame_number","page_number","physical_address","virtual_address","FRAME_NUMBER_SIZE","FrameNumber","add","add_assign","as_bytes","as_bytes_mut","as_pte","as_pte_mut","as_trap_context_mut","bits","borrow","borrow_mut","clone","clone_into","cmp","eq","from","from","from","into","partial_cmp","to_owned","try_from","try_into","type_id","PAGE_NUMBER_SIZE","PageNumber","PageRange","PageRangeIterator","as_trap_context_mut","bits","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","end","end","end","eq","from","from","from","from","from","index","into","into","into","into_iter","into_iter","iter","len","new","new","next","offset","partial_cmp","start","start","state","sub","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","PHYSICAL_ADDRESS_SIZE","PhysicalAddress","add","as_mut","as_ptr","as_ptr_mut","as_ref","bits","borrow","borrow_mut","ceil","clone","clone_into","cmp","eq","floor","from","from","from","into","is_aligned","page_offset","partial_cmp","sub","to_owned","try_from","try_into","type_id","VIRTUAL_ADDRESS_SIZE","VirtualAddress","add","add_assign","as_ptr","as_ptr_mut","bits","borrow","borrow_mut","ceil","clone","clone_into","cmp","eq","floor","from","from","from","into","is_aligned","page_offset","partial_cmp","sub","to_owned","try_from","try_into","type_id","FRAME_ALLOCATOR","FrameAllocator","FrameTracker","LAZY","StackFrameAllocator","__private_field","__stability","__static_ref_initialize","allocate","allocate","allocate_frame","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deallocate","deallocate","deallocate_frame","deallocated_page","deref","drop","frame_end","frame_number","frame_number","frame_start","from","from","from","init","init","into","into","into","kernel_end","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","HEAP_ALLOCATOR","KERNEL_HEAP","__rg_alloc","__rg_alloc_zeroed","__rg_dealloc","__rg_oom","__rg_realloc","handle_alloc_error","init","A","COW","D","G","InternalBitFlags","Iter","IterRaw","NUM_FLAGS","OPTIONS","OPTIONS_NAMES","PTEFlags","PageTable","PageTableEntry","R","U","V","W","X","all","all","all","as_ref","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bits","bits","bits_mut","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","complement","complement","contains","contains","contains","create_pte","default","default","difference","difference","done","empty","empty","empty","eq","extend","find_pte","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_list","frame_number","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","from_name","from_satp","from_str","hash","idx","inner","insert","insert","insert","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_all","is_all","is_all","is_cow","is_empty","is_empty","is_empty","is_executable","is_readable","is_valid","is_writable","iter","iter","iter","iter_names","iter_names","iter_names","map","new","new","next","next","not","partial_cmp","remove","remove","remove","root_frame_number","satp","set","set","set","source","state","sub","sub_assign","symmetric_difference","symmetric_difference","to_owned","to_owned","to_owned","to_string","toggle","toggle","toggle","translate","translate_page","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","union","unmap","Framed","Identical","InternalBitFlags","Iter","IterRaw","KERNEL_SPACE","LAZY","MapPermission","MapType","NUM_FLAGS","OPTIONS","OPTIONS_NAMES","PageSegment","PageSet","R","U","W","X","__private_field","__stability","__static_ref_initialize","all","all","all","as_ref","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bits","bits_mut","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bss_end","bss_stack_start","clone","clone","clone","clone","clone_bytes","clone_frame","clone_from","clone_into","clone_into","clone_into","clone_into","cmp","complement","complement","contains","contains","contains","data_end","data_start","default","deref","difference","difference","done","empty","empty","empty","end","eq","eq","extend","find_segment_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frame_map","frame_map","frame_map_mut","from","from","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_elf","from_iter","from_kernel","from_name","from_name","from_name","from_str","hash","idx","init","inner","insert","insert","insert","insert_frame","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_all","is_all","is_all","is_empty","is_empty","is_empty","iter","iter","iter","iter_names","iter_names","iter_names","kernel_end","map_page","map_permission","map_range","map_type","new","new","next","next","not","page_range","page_range","page_table","partial_cmp","push","push_mapped","remove","remove","remove","remove_segment","rodata_end","rodata_start","satp","segment_list","segment_list","set","set","set","source","start","state","sub","sub_assign","symmetric_difference","symmetric_difference","text_end","text_start","to_owned","to_owned","to_owned","to_owned","to_string","toggle","toggle","toggle","trampoline_start","translate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","union","unmap_page","unmap_range","UserPtr","as_buffer","as_string","borrow","borrow_mut","clone","clone_into","deref","deref_mut","from","into","new","phantom","ptr","satp","to_owned","try_from","try_into","type_id","CONSOLE_GETCHAR_EXTENSION","CONSOLE_PUTCHAR_EXTENSION","SYSTEM_RESET_EXTENSION","TIMER_EXTENSION","console_getchar","console_putchar","sbi_call","set_timer","shutdown","Event","EventBus","Mutex","MutexGuard","event_bus","mutex","wait_for_event","","CHILD_PROCESS_QUIT","Event","EventBus","EventBusFuture","EventCallback","InternalBitFlags","Iter","IterRaw","NUM_FLAGS","OPTIONS","OPTIONS_NAMES","all","all","all","as_ref","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bits","bits","bits_mut","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callback_list","clear","clone","clone","clone_into","clone_into","cmp","complement","complement","contains","contains","contains","default","default","default","difference","difference","done","empty","empty","empty","eq","event","event_bus","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_bits_truncate","from_iter","from_name","from_name","from_name","from_str","hash","idx","inner","insert","insert","insert","intersection","intersection","intersects","intersects","intersects","into","into","into","into","into","into","into_future","into_iter","into_iter","into_iter","is_all","is_all","is_all","is_empty","is_empty","is_empty","iter","iter","iter","iter_names","iter_names","iter_names","new","next","next","not","partial_cmp","poll","push","remove","remove","remove","set","set","set","source","state","sub","sub_assign","subscribe","subscribed_event","symmetric_difference","symmetric_difference","to_owned","to_owned","to_string","toggle","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","union","wait_for_event","Mutex","MutexGuard","borrow","borrow","borrow_mut","borrow_mut","cell","deref","deref_mut","drop","from","from","into","into","lock","lock","mutex","new","new","phantom","try_from","try_from","try_into","try_into","type_id","type_id","unlock","","SYSCALL_EXEC","SYSCALL_EXIT","SYSCALL_FORK","SYSCALL_GET_TIME","SYSCALL_READ","SYSCALL_SCHED_YIELD","SYSCALL_WAITPID","SYSCALL_WRITE","SystemCall","borrow","borrow_mut","execute","from","fs","into","new","process","sys_exec","sys_exit","sys_fork","sys_get_time","sys_read","sys_sched_yield","sys_waitpid","sys_write","thread","timer","try_from","try_into","type_id","","STDIN","STDOUT","","INIT_PROCESS","LAZY","Process","Status","Thread","__private_field","__stability","__static_ref_initialize","borrow","borrow_mut","deref","from","init","into","pid","process","thread","tid","try_from","try_into","type_id","LAZY","PID_ALLOCATOR","Pid","PidAllocator","PidHandle","__private_field","__stability","__static_ref_initialize","allocate","allocate_pid","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deallocate","deallocated_pid","deref","drop","from","from","from","into","into","into","new","new","pid","pid","state","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","LAZY","PROCESS_MAP","Process","ProcessState","Runnable","Status","Zombie","__private_field","__stability","__static_ref_initialize","allocate_tid","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","child_list","child_list_mut","clone","clone_into","deallocated_tid","deref","eq","event_bus","event_bus","exec","exit","exit_code","exit_code","fork","from","from","from","from","get_process","insert_process","into","into","into","into","main_thread","main_thread_mut","new","new","page_set","page_set","page_set_mut","parent","parent","pid","pid_handle","remove_process","set_exit_code","set_page_set","set_status","state","state","status","status","thread_list","thread_list_mut","tid_allocator","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Thread","ThreadState","borrow","borrow","borrow_mut","borrow_mut","clone_frame","deallocate_trap_context","deallocate_user_stack","drop","exit","from","from","into","into","kernel_trap_context_mut","new","new","process","process","reallocate_resource","satp","set_trap_context_frame","set_user_stack_bottom","state","state","tid","tid","trap_context_frame","trap_context_page","try_from","try_from","try_into","try_into","type_id","type_id","user_stack_base","user_stack_base","user_stack_bottom","user_stack_top","user_trap_context_mut","Tid","TidAllocator","allocate","borrow","borrow_mut","deallocate","deallocated_tid","from","into","new","state","try_from","try_into","type_id","TICK_PER_SEC","enable_timer_interrupt","get_time","set_trigger"],"q":[[0,"kernel"],[18,"kernel::console"],[28,"kernel::constant"],[36,"kernel::executor"],[59,"kernel::executor::context"],[78,"kernel::executor::future"],[109,"kernel::executor::scheduler"],[124,"kernel::file"],[129,"kernel::file::load"],[149,"kernel::lang_items"],[150,"kernel::logging"],[163,"kernel::mem"],[180,"kernel::mem::address"],[189,"kernel::mem::address::frame_number"],[214,"kernel::mem::address::page_number"],[268,"kernel::mem::address::physical_address"],[296,"kernel::mem::address::virtual_address"],[323,"kernel::mem::frame_allocator"],[371,"kernel::mem::heap_allocator"],[380,"kernel::mem::page_table"],[573,"kernel::mem::segment"],[809,"kernel::mem::user_ptr"],[828,"kernel::sbi"],[837,"kernel::sync"],[844,"kernel::sync::event_bus"],[1020,"kernel::sync::mutex"],[1047,"kernel::syscall"],[1078,"kernel::syscall::fs"],[1081,"kernel::syscall::process"],[1082,"kernel::task"],[1103,"kernel::task::pid"],[1143,"kernel::task::process"],[1221,"kernel::task::thread"],[1262,"kernel::task::tid"],[1276,"kernel::timer"]],"d":["The <code>bss_end</code> is a symbol declared in the <code>src/linker.ld</code>, â€¦","The <code>bss_start</code> is a symbol declared in the <code>src/linker.ld</code>, â€¦","Initializes the <code>.bss</code> section with zeros.","The <code>console</code> module contains functions that interacts with â€¦","The <code>constant</code> module defines several parameters for the â€¦","The <code>executor</code> module provides an executor that schedules â€¦","","The <code>lang_items</code> module contains Rust lang items. Rust lang â€¦","The <code>logging</code> module implements the log::Log trait.","","Print to the debug console.","Print to the debug console, with a newline.","Initializes the thread executor and spawns the <code>INIT_PROCESS</code>â€¦","The <code>sbi</code> module contains functions that invokes the RISC-V â€¦","The <code>sync</code> module provides synchronization primitives for â€¦","The <code>syscall</code> module provides system calls for interacting â€¦","The <code>task</code> module provides types for representing processes â€¦","The <code>timer</code> module provides functions to configure the timer â€¦","The <code>Console</code> struct implements the Write trait, which â€¦","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","The clock frequency of the system, in Hz.","The size of the kernel heap, in bytes.","The memory limit for the kernel, in bytes.","The size of a page in memory, in bytes.","The number of bits needed to represent a page size.","The address of the trampoline page, which is used for â€¦","The base address of the trap context.","The size of the user stack, in bytes.","","","","","","","","","","The <code>context</code> module provides a <code>TrapContext</code> struct that save â€¦","","Returns the argument unchanged.","","Initializes the <code>stvec</code> to the address of the â€¦","Calls <code>U::from(self)</code>.","Runs an event loop that executes all the tasks in the â€¦","","","","","","","","The <code>TrapContext</code> struct is used to save and restore the â€¦","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","The <code>ControlFlow</code> enum specifies the operation that the â€¦","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","The <code>thread_loop</code> future represents the lifetime of a user â€¦","","","","","","","","","The <code>TaskQueue</code> struct represents a queue of Runnable tasks, â€¦","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Initialize the kernel logger with the specified log level, â€¦","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","The <code>address</code> module defines various structs for the Sv39 â€¦","","The <code>frame_allocator</code> module provides a frame allocator for â€¦","The <code>heap_allocator</code> module provides a heap allocator for â€¦","","The <code>page_table</code> module defines a 3-level page table that â€¦","","","","","","","","","","","","","The <code>FrameNumber</code> struct represents the number of a 44-bit â€¦","","","Interprets the frame as a slice of <code>u8</code> and return a â€¦","Interprets the frame as a slice of <code>u8</code> and return a mutable â€¦","Interprets the frame as a slice of PageTableEntry and â€¦","Interprets the frame as a slice of PageTableEntry and â€¦","Interprets the frame as a TrapContext and return a mutable â€¦","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","The <code>PageRange</code> struct represents a range of page numbers, â€¦","","Interprets the page as a TrapContext and return a mutable â€¦","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>PhysicalAddress</code> struct represents a 56-bit physical â€¦","","","Returns a raw pointer to the physical address.","Returns a mutable raw pointer to the physical address.","","","","","Returns the FrameNumber that represents the frame that â€¦","","","","","Returns the FrameNumber that represents the frame that â€¦","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the physical address is aligned to a frame.","Returns the byte offset of the physical address within its â€¦","","","","","","","","The <code>VirtualAddress</code> struct represents a 39-bit virtual â€¦","","","Returns a raw pointer to the virtual address.","Returns a mutable raw pointer to the virtual address.","","","","Returns the PageNumber that represents the page that â€¦","","","","","Returns the PageNumber that represents the page that â€¦","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the virtual address is aligned to a page.","Returns the byte offset of the virtual address within its â€¦","","","","","","","","","The <code>FrameTracker</code> struct represents a frame in the physical â€¦","","","","","","","","Allocates a frame and returns a FrameTracker to track the â€¦","","","","","","","","","Deallocates the frame with a specific FrameNumber.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Initializes a frame allocator that manages the physical â€¦","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Initializes a frame with a specific FrameNumber and zeros â€¦","","","","","","","","","","","","","","","","","","Panics when heap allocation fails.","Initializes the kernel heap with a fixed size as the â€¦","","","","","","","","","","","","","","","","","","","Returns the set containing all flags.","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","","","","Returns the left flags, but with all the right flags â€¦","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained â€¦","","","Finds the page table with a PageNumber and returns a â€¦","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","Returns an empty set of flags.","","","","Finds the page table with a PageNumber and returns a â€¦","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Convert from underlying bit representation, unless that â€¦","","Convert from underlying bit representation, preserving all â€¦","","","Convert from underlying bit representation, dropping any â€¦","","","","","Get the value for a flag from its stringified name.","","Creates a PageTable where the <code>root_frame_number</code> points to â€¦","","","","","","Inserts the specified flags in-place.","","Returns the intersection between the flags in <code>self</code> and â€¦","","","Returns <code>true</code> if there are flags common to both <code>self</code> and â€¦","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns <code>true</code> if all flags are currently set.","","","","Returns <code>true</code> if no flags are currently stored.","","","","","","Iterate over enabled flag values.","","","","Iterate over enabled flag values with their stringified â€¦","","Maps a PageNumber to a FrameNumber and sets the â€¦","","","","","Returns the complement of this set of flags.","","Removes the specified flags in-place.","","","","Returns the value of the <code>satp</code> register that points to the â€¦","Inserts or removes the specified flags depending on the â€¦","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> â€¦","","","","","","","Toggles the specified flags in-place.","","Finds the page table with a VirtualAddress and returns a â€¦","Finds the page table with a PageNumber and returns a â€¦","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","Clears the PageTableEntry corresponding to the PageNumber.","","","","","","","","","","","","","The <code>PageSegment</code> struct represents a consecutive range of â€¦","The <code>PageSet</code> struct represents a collection of related â€¦","","","","","","","","Returns the set containing all flags.","","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","","","Returns the left flags, but with all the right flags â€¦","Toggles the set of flags.","","","","","","","","","","","","","","","","","","","","","","","Writes <code>bytes</code> to the pages represented with <code>page_range</code>.","","","","","","","","Returns the complement of this set of flags.","","","Returns <code>true</code> if all of the flags in <code>other</code> are contained â€¦","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","Returns an empty set of flags.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Convert from underlying bit representation, unless that â€¦","","Convert from underlying bit representation, preserving all â€¦","","","","Convert from underlying bit representation, dropping any â€¦","","","","","","Get the value for a flag from its stringified name.","","","","","","","Inserts the specified flags in-place.","","","","Returns the intersection between the flags in <code>self</code> and â€¦","","Returns <code>true</code> if there are flags common to both <code>self</code> and â€¦","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if all flags are currently set.","","","","Returns <code>true</code> if no flags are currently stored.","","Iterate over enabled flag values.","","","Iterate over enabled flag values with their stringified â€¦","","","","Maps a page with <code>page_number</code> to a frame in the <code>page_table</code>.","","Maps the range of pages represented with <code>page_range</code> to â€¦","","","","","","Returns the complement of this set of flags.","","","","","","","","Removes the specified flags in-place.","","Removes a PageSegment that contains a specific â€¦","","","","","","Inserts or removes the specified flags depending on the â€¦","","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> â€¦","","","","","","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","Unmaps a page with <code>page_number</code> from a frame in the â€¦","Unmaps the range of pages represented with <code>page_range</code> from â€¦","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Write data present in <code>char</code> to debug console.","","","Put all the harts to shutdown state.","","","","","The <code>event_bus</code> module provides an EventBus that supports â€¦","The <code>mutex</code> module provides a mutual exclusion primitive â€¦","","","Indicates that a child process has quit.","The <code>Event</code> struct represents events that can be subscribed â€¦","The <code>EventBus</code> structsupports publish-subscribe-style â€¦","The <code>EventBusFuture</code> struct is a future that completes when â€¦","","","","","","","","","Returns the set containing all flags.","","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","","","","Returns the left flags, but with all the right flags â€¦","Toggles the set of flags.","","","","","","","","","","","","","","Clears an event from the event bus.","","","","","","Returns the complement of this set of flags.","","Returns <code>true</code> if all of the flags in <code>other</code> are contained â€¦","","","","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","","","Returns an empty set of flags.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Convert from underlying bit representation, unless that â€¦","","Convert from underlying bit representation, preserving all â€¦","","","Convert from underlying bit representation, dropping any â€¦","","","","","Get the value for a flag from its stringified name.","","","","","","Inserts the specified flags in-place.","","","Returns the intersection between the flags in <code>self</code> and â€¦","","","Returns <code>true</code> if there are flags common to both <code>self</code> and â€¦","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns <code>true</code> if all flags are currently set.","","","Returns <code>true</code> if no flags are currently stored.","","Iterate over enabled flag values.","","","Iterate over enabled flag values with their stringified â€¦","","","Creates a new event bus.","","","Returns the complement of this set of flags.","","","Publishes an event on the event bus.","Removes the specified flags in-place.","","","Inserts or removes the specified flags depending on the â€¦","","","","","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Subscribes to events on the event bus and executes the â€¦","","Returns the symmetric difference between the flags in <code>self</code> â€¦","","","","","Toggles the specified flags in-place.","","","","","","","","","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","","Returns a future that completes when a specified event is â€¦","The <code>Mutex</code> struct is a mutual exclusion primitive useful â€¦","The <code>MutexGuard</code> struct is an RAII guard to allow scoped â€¦","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Acquires a lock on the <code>Mutex</code> and returns a MutexGuard that â€¦","","","Creates a new <code>Mutex</code> with the given initial value.","Creates a new <code>MutexGuard</code> for the given Mutex.","","","","","","","","Releases the lock on the <code>Mutex</code>.","","","","","","","","","","The <code>SystemCall</code> struct provides an interface for invoking â€¦","","","Invokes a system call with the given arguments.","Returns the argument unchanged.","The <code>fs</code> module provides system calls to interact with the â€¦","Calls <code>U::from(self)</code>.","Constructs a new <code>SystemCall</code> instance with the given thread.","The <code>process</code> module provides system calls to interact with â€¦","Replaces the current process with a new process loaded â€¦","Terminates the current thread with the given exit code.","Forks the current process and create a new child process.","Returns the current system time in milliseconds.","Reads the content from a file descriptor and writes them â€¦","Yields the CPU to another thread.","Waits for a child process with the given process to â€¦","Writes the contents of a buffer to a file descriptor.","","The <code>timer</code> module provides time-related system calls.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Spawns the init process.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces the current process with a new process loaded â€¦","Terminates the current thread with the given exit code.","","","Forks the current process and create a new child process.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a process with a main thread that runs a specific â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","The number of timer ticks per second.","Enables the system timer interrupt.","Returns the current system time in milliseconds.","Sets the timer interrupt trigger for the next timer tick."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,0,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,10,10,0,10,10,0,0,10,0,0,0,0,10,10,10,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,16,0,16,16,0,0,0,18,16,18,16,16,18,16,18,16,18,18,18,0,18,0,18,16,18,16,18,16,0,0,0,24,24,24,24,24,24,7,24,7,24,24,24,24,0,0,0,0,0,0,0,28,0,0,0,0,0,28,28,28,28,0,0,0,28,0,28,28,28,0,0,0,31,31,31,31,31,0,31,31,31,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,0,0,37,37,40,37,38,40,37,38,37,38,37,38,37,38,40,38,37,40,37,37,37,38,37,40,37,38,40,38,38,38,40,38,40,37,37,38,38,40,37,37,38,40,37,38,40,37,38,40,37,38,0,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,0,0,44,0,0,89,42,0,43,42,44,43,42,44,89,42,0,42,44,43,42,43,43,42,43,42,44,0,42,43,42,44,0,89,43,42,43,42,44,43,42,44,43,42,44,0,0,0,0,0,0,0,0,0,46,46,46,46,0,0,0,0,0,0,0,0,0,46,46,46,46,46,46,46,47,47,46,46,46,46,46,46,47,47,48,47,46,46,49,46,53,54,47,48,49,46,53,54,47,48,46,47,48,46,47,48,47,46,47,46,46,47,49,47,48,46,47,53,46,46,47,47,46,49,48,46,46,46,46,47,47,47,47,47,47,49,48,49,46,53,54,47,47,48,46,46,47,46,46,47,46,46,47,46,46,46,47,49,47,47,54,53,46,46,47,46,47,46,46,47,49,46,53,54,47,48,46,53,54,46,46,47,48,46,46,47,48,48,48,48,46,46,47,46,46,47,49,49,48,53,54,46,47,46,46,47,49,49,46,46,47,54,54,46,46,46,47,46,47,48,47,46,46,47,49,49,49,46,53,54,47,48,49,46,53,54,47,48,49,46,53,54,47,48,46,47,49,59,59,0,0,0,0,0,0,0,0,0,0,0,0,57,57,57,57,61,0,0,57,57,58,58,57,57,57,57,57,57,58,58,58,57,57,56,59,57,63,64,58,60,61,56,59,57,63,64,58,60,61,0,0,59,57,58,60,60,56,56,59,57,58,60,58,57,58,57,57,58,0,0,58,61,57,58,63,57,57,58,60,59,58,57,56,59,57,57,57,57,58,58,58,58,58,58,60,60,60,56,59,57,63,64,58,58,60,61,57,57,58,57,57,58,57,57,58,56,57,56,57,57,58,58,58,64,56,63,57,57,58,56,57,58,57,57,58,56,59,57,63,64,58,60,61,57,63,64,57,57,58,57,57,58,57,57,58,57,57,58,0,60,60,60,60,56,60,63,64,57,60,60,56,58,56,56,57,57,58,56,0,0,56,56,56,57,57,58,64,60,64,57,57,57,58,0,0,59,57,58,60,58,57,57,58,0,56,56,59,57,63,64,58,60,61,56,59,57,63,64,58,60,61,56,59,57,63,64,58,60,61,57,58,60,60,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,67,67,68,68,67,67,67,67,67,67,68,68,68,67,67,73,67,71,72,68,70,73,67,71,72,68,70,70,70,67,68,67,68,68,67,68,67,67,68,67,68,70,67,68,71,67,67,68,68,70,73,67,67,67,67,67,68,68,68,68,68,68,73,67,71,72,68,68,70,67,67,68,67,67,68,67,67,68,67,67,67,68,68,68,72,71,67,67,68,67,68,67,67,68,73,67,71,72,68,70,73,67,71,72,67,67,68,67,67,68,67,67,68,67,67,68,70,71,72,67,68,73,70,67,67,68,67,67,68,72,72,67,67,70,73,67,68,67,68,68,67,67,68,73,67,71,72,68,70,73,67,71,72,68,70,73,67,71,72,68,70,67,68,0,0,0,9,75,9,75,9,75,75,75,9,75,9,75,9,9,75,9,75,9,9,75,9,75,9,75,9,0,0,0,0,0,0,0,0,0,0,76,76,76,76,0,76,76,0,76,76,76,76,76,76,76,76,76,0,76,76,76,0,0,0,0,0,0,0,0,0,79,0,0,79,79,79,79,0,79,0,0,0,0,79,79,79,0,0,0,0,0,82,0,0,80,0,81,80,82,81,80,82,80,80,82,81,81,80,82,81,80,82,81,80,81,81,80,81,80,82,81,80,82,81,80,82,0,0,0,0,84,0,84,85,0,0,83,78,83,85,84,78,83,85,84,83,83,84,84,83,85,84,78,78,78,78,83,83,78,78,83,85,84,0,0,78,83,85,84,83,83,78,83,83,83,83,83,83,78,78,0,83,83,83,78,78,83,83,83,83,83,84,78,83,85,84,78,83,85,84,78,83,85,84,0,0,22,87,22,87,22,22,22,22,22,22,87,22,87,87,22,87,22,22,22,22,87,87,22,22,22,22,87,87,22,87,22,87,22,87,22,22,87,87,87,0,0,88,88,88,88,88,88,88,88,88,88,88,88,0,0,0,0],"f":[0,0,[[]],0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1],[[],2],[[],2],[[],3],[[4,5],6],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[9,[[8,[7]]]]]],[[],[[9,[[8,[7]]]]]],[[]],[[]],0,[10,[[9,[[8,[7]]]]]],[[]],0,[[]],[[]],[[]],0,[[[0,[11,12]]]],0,[[],2],[[],2],[[],3],0,0,[[]],[[]],[[]],[[]],0,0,[[13,14,14]],[[13,14]],[[13,15]],[[],2],[[],2],[[],3],[[13,14],14],0,[13,14],0,0,[13,15],0,0,0,0,0,0,0,[[]],[[13,14]],[[]],[[]],[[]],[[]],[[16,16],17],[[]],[[]],[[]],[[]],[[]],[[],18],[[[19,[18]],20],21],[[[23,[22]]]],0,[[[23,[22]]]],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[]],0,0,[[]],[[]],[[]],[[]],[[],24],0,[25],[[24,25]],[[],[[26,[25]]]],[24,[[26,[25]]]],[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,[[],[[27,[5]]]],[[],[[27,[5]]]],0,0,0,[[]],[[]],[28,[[27,[5]]]],[[]],[5,26],[[],14],[14],[[]],[[]],[[],2],[[],2],[[],3],[29,30],0,0,[[]],[[]],[[31,32],17],[31],[[]],[[]],[[]],[[31,33]],[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[34,14],34],[[34,14]],[34],[34],[34],[34],[34,13],0,[[]],[[]],[34,34],[[]],[[34,34],35],[[34,34],17],[[]],[36,34],[14,34],[[]],[[34,34],[[26,[35]]]],[[]],[[],2],[[],2],[[],3],0,0,0,0,[37,13],0,[[]],[[]],[[]],[[]],[[]],[[]],[37,37],[38,38],[[]],[[]],[[37,37],35],[38,37],0,0,[[37,37],17],[[]],[[]],[39,37],[14,37],[[]],[37],[[]],[[]],[[]],[[]],[38],[38,40],[38,14],[[37,37],40],[[37,37],38],[40,26],[[37,14],37],[[37,37],[[26,[35]]]],[38,37],0,0,[[37,37],14],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[],3],0,0,[[36,14],36],[36],[36,41],[36,41],[36],0,[[]],[[]],[36,34],[36,36],[[]],[[36,36],35],[[36,36],17],[36,34],[14,36],[34,36],[[]],[[]],[36,17],[36,14],[[36,36],[[26,[35]]]],[[36,14],36],[[]],[[],2],[[],2],[[],3],0,0,[[39,14],39],[[39,14]],[39,41],[39,41],0,[[]],[[]],[39,37],[39,39],[[]],[[39,39],35],[[39,39],17],[39,37],[14,39],[[]],[37,39],[[]],[39,17],[39,14],[[39,39],[[26,[35]]]],[[39,14],39],[[]],[[],2],[[],2],[[],3],0,0,0,0,0,0,[[],[[9,[42]]]],[[],[[9,[42]]]],[[],[[26,[34]]]],[42,[[26,[34]]]],[[],[[26,[43]]]],[[]],[[]],[[]],[[]],[[]],[[]],[34],[[42,34]],[34],0,[44,[[9,[42]]]],[43],0,[43,34],0,0,[[]],[[]],[[]],[[]],[[42,34,34]],[[]],[[]],[[]],0,[[]],[34,43],[[],42],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[],3],0,0,[[14,14],41],[[14,14],41],[[41,14,14]],[[14,14],30],[[41,14,14,14],41],[45,30],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],46],[[],46],[[],47],[47,14],[[46,46],46],[[46,46]],[[46,46],46],[[46,46]],[46,14],[46,14],[47,14],0,0,[47,14],[[46,46],46],[[46,46]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,46],[47,47],[48,48],[[]],[[]],[[]],[[47,47],35],[46,46],[47,47],[[46,46],17],[[46,46],17],[[47,47],17],[[49,37],[[26,[48]]]],[[],47],[[],48],[[46,46],46],[[47,47],47],0,[[],46],[[],46],[[],47],[[47,47],17],[[46,50]],[[49,37],[[26,[48]]]],[48,46],[[46,51],6],[[46,51],6],[[46,51],6],[[46,51],6],[[47,51],6],[[47,51],6],[[47,51],6],[[47,51],6],[[47,51],6],[[47,51],6],0,[48,34],[[]],[[]],[[]],[[]],[[]],[14,47],[[]],[14,[[26,[46]]]],[14,[[26,[46]]]],[14,[[26,[47]]]],[14,46],[14,46],[14,47],[14,46],[14,46],[14,47],[50,46],[5,[[26,[46]]]],[5,[[26,[46]]]],[5,[[26,[47]]]],[14,49],[5,[[2,[47]]]],[[47,52]],0,0,[[46,46]],[[46,46]],[[47,47]],[[46,46],46],[[47,47],47],[[46,46],17],[[46,46],17],[[47,47],17],[[]],[[]],[[]],[[]],[[]],[[]],[46],[[]],[[]],[46,17],[46,17],[47,17],[48,17],[46,17],[46,17],[47,17],[48,17],[48,17],[48,17],[48,17],[46,53],[46],[47,53],[46],[46,54],[47,54],[[49,37,34,46]],[[],49],[[34,46],48],[53,26],[54,26],[46,46],[[47,47],[[26,[35]]]],[[46,46]],[[46,46]],[[47,47]],0,[49,14],[[46,46,17]],[[46,46,17]],[[47,47,17]],0,0,[[46,46],46],[[46,46]],[[46,46],46],[[47,47],47],[[]],[[]],[[]],[[],55],[[46,46]],[[46,46]],[[47,47]],[[49,39],[[26,[36]]]],[[49,37],[[26,[48]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[46,46],46],[[47,47],47],[[49,37]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[23,[[9,[56]]]]]],[[],[[23,[[9,[56]]]]]],[[],57],[[],57],[[],58],[58,14],[[57,57],57],[[57,57]],[[57,57],57],[[57,57]],[57,14],[57,14],[58,14],0,[58,14],[[57,57],57],[[57,57]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[59,59],[57,57],[58,58],[60,60],[[60,49]],[[56,39],17],[56,56],[[]],[[]],[[]],[[]],[[58,58],35],[57,57],[58,58],[[57,57],17],[[57,57],17],[[58,58],17],0,0,[[],58],[61,[[23,[[9,[56]]]]]],[[57,57],57],[[58,58],58],0,[[],57],[[],57],[[],58],[60,37],[[59,59],17],[[58,58],17],[[57,50]],[[56,39],[[26,[60]]]],[[59,51],6],[[57,51],6],[[57,51],6],[[57,51],6],[[57,51],6],[[58,51],6],[[58,51],6],[[58,51],6],[[58,51],6],[[58,51],6],[[58,51],6],[60,[[62,[37,[23,[43]]]]]],0,[60,[[62,[37,[23,[43]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[14,58],[[]],[[]],[14,[[26,[57]]]],[14,[[26,[57]]]],[14,[[26,[58]]]],[14,57],[14,57],[14,58],[14,57],[14,57],[14,58],[[]],[50,57],[[],56],[5,[[26,[57]]]],[5,[[26,[57]]]],[5,[[26,[58]]]],[5,[[2,[58]]]],[[58,52]],0,[56],0,[[57,57]],[[57,57]],[[58,58]],[[56,39,39,57]],[[57,57],57],[[58,58],58],[[57,57],17],[[57,57],17],[[58,58],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[57],[[]],[[]],[57,17],[57,17],[58,17],[57,17],[57,17],[58,17],[57,63],[57],[58,63],[57,64],[57],[58,64],0,[[60,49,37]],0,[[60,49]],0,[[],56],[[39,39,59,57],60],[63,26],[64,26],[57,57],[60,38],0,0,[[58,58],[[26,[35]]]],[[56,60,26]],[[56,60,26]],[[57,57]],[[57,57]],[[58,58]],[[56,39]],0,0,[56,14],[56,[[27,[60]]]],0,[[57,57,17]],[[57,57,17]],[[58,58,17]],0,[60,37],0,[[57,57],57],[[57,57]],[[57,57],57],[[58,58],58],0,0,[[]],[[]],[[]],[[]],[[],55],[[57,57]],[[57,57]],[[58,58]],0,[[56,37],[[26,[48]]]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[57,57],57],[[58,58],58],[[60,49,37]],[[60,49]],0,[[65,14],27],[65,55],[[]],[[]],[[[65,[66]]],[[65,[66]]]],[[]],[65],[65],[[]],[[]],[[14,14],65],0,0,0,[[]],[[],2],[[],2],[[],3],0,0,0,0,[[],14],[14],[[14,14,14,14]],[14],[[],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],67],[[],67],[[],68],[68,69],[[67,67],67],[[67,67]],[[67,67],67],[[67,67]],[67,69],[67,69],[68,69],0,[68,69],[[67,67],67],[[67,67]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[70,67]],[67,67],[68,68],[[]],[[]],[[68,68],35],[67,67],[68,68],[[67,67],17],[[67,67],17],[[68,68],17],[[],67],[[],68],[[],70],[[67,67],67],[[68,68],68],0,[[],67],[[],67],[[],68],[[68,68],17],0,0,[[67,50]],[[67,51],6],[[67,51],6],[[67,51],6],[[67,51],6],[[68,51],6],[[68,51],6],[[68,51],6],[[68,51],6],[[68,51],6],[[68,51],6],[[]],[[]],[[]],[[]],[[]],[69,68],[[]],[69,[[26,[67]]]],[69,[[26,[67]]]],[69,[[26,[68]]]],[69,67],[69,67],[69,68],[69,67],[69,67],[69,68],[50,67],[5,[[26,[67]]]],[5,[[26,[67]]]],[5,[[26,[68]]]],[5,[[2,[68]]]],[[68,52]],0,0,[[67,67]],[[67,67]],[[68,68]],[[67,67],67],[[68,68],68],[[67,67],17],[[67,67],17],[[68,68],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[67],[[]],[[]],[67,17],[67,17],[68,17],[67,17],[67,17],[68,17],[67,71],[67],[68,71],[67,72],[67],[68,72],[[],[[23,[[9,[70]]]]]],[71,26],[72,26],[67,67],[[68,68],[[26,[35]]]],[[[19,[73]],20],[[21,[67]]]],[[70,67]],[[67,67]],[[67,67]],[[68,68]],[[67,67,17]],[[67,67,17]],[[68,68,17]],0,0,[[67,67],67],[[67,67]],[[70,[8,[74]]]],0,[[67,67],67],[[68,68],68],[[]],[[]],[[],55],[[67,67]],[[67,67]],[[68,68]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[67,67],67],[[68,68],68],[[[23,[[9,[70]]]],67],11],0,0,[[]],[[]],[[]],[[]],0,[75],[75],[75],[[]],[[]],[[]],[[]],[9,75],0,0,[[],9],[9,75],0,[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[9],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[76,16],[[]],0,[[]],[22,76],0,[[76,[65,[41]]]],[[76,14]],[76],[76],[[76,14,[65,[41]],14]],[76],[[76,77,[65,[14]]]],[[76,14,[65,[41]],14]],0,0,[[],2],[[],2],[[],3],0,0,0,0,0,0,0,0,0,0,[[],[[23,[78]]]],[[],[[23,[78]]]],[[]],[[]],[79,[[23,[78]]]],[[]],[[]],[[]],0,0,0,0,[[],2],[[],2],[[],3],0,0,0,0,0,0,[[],[[9,[80]]]],[[],[[9,[80]]]],[80,81],[[],81],[[]],[[]],[[]],[[]],[[]],[[]],[[80,14]],0,[82,[[9,[80]]]],[81],[[]],[[]],[[]],[[]],[[]],[[]],[14,81],[[],80],[81,14],0,0,[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[],3],0,0,0,0,0,0,0,0,[[],[[9,[[62,[14,[23,[78]]]]]]]],[[],[[9,[[62,[14,[23,[78]]]]]]]],[83,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[83,[[27,[[23,[78]]]]]],[84,84],[[]],[[83,14]],[85,[[9,[[62,[14,[23,[78]]]]]]]],[[84,84],17],[78,[[23,[[9,[70]]]]]],0,[[[23,[78]],5,[27,[55]]]],[[78,14]],[83,14],0,[[[23,[78]]],[[23,[78]]]],[[]],[[]],[[]],[[]],[14,[[26,[[23,[78]]]]]],[[14,[23,[78]]]],[[]],[[]],[[]],[[]],[83,[[23,[22]]]],[83,[[23,[22]]]],[5,[[23,[78]]]],[[56,[26,[[86,[78]]]]],83],[83,56],0,[83,56],[83,[[26,[[86,[78]]]]]],0,[78,14],0,[14],[[83,14]],[[83,56]],[[83,84]],[78,[[9,[83]]]],0,[83,84],0,0,[83,[[27,[[23,[22]]]]]],0,[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[[],3],[[],3],0,0,[[]],[[]],[[]],[[]],[[22,39],17],[22],[22],[22],[[22,14]],[[]],[[]],[[]],[[]],[87,13],[[[23,[78]],39,17],22],[[37,34,39],87],[22,[[23,[78]]]],0,[[22,39]],[22,14],[[87,34]],[[87,39]],[22,[[9,[87]]]],0,[22,14],0,0,0,[[],2],[[],2],[[],2],[[],2],[[],3],[[],3],[22,39],0,0,[87,39],[87,13],0,0,[88,14],[[]],[[]],[[88,14]],0,[[]],[[]],[[],88],0,[[],2],[[],2],[[],3],0,[[]],[[],14],[[]]],"c":[],"p":[[3,"Arguments"],[4,"Result"],[3,"TypeId"],[3,"Console"],[15,"str"],[6,"Result"],[8,"Scheduler"],[3,"Box"],[3,"Mutex"],[3,"SCHEDULER"],[8,"Future"],[8,"Send"],[3,"TrapContext"],[15,"usize"],[3,"Sstatus"],[4,"ControlFlow"],[15,"bool"],[3,"YieldFuture"],[3,"Pin"],[3,"Context"],[4,"Poll"],[3,"Thread"],[3,"Arc"],[3,"TaskQueue"],[3,"Runnable"],[4,"Option"],[3,"Vec"],[3,"BIN_NAME_LIST"],[3,"PanicInfo"],[15,"never"],[3,"KernelLogger"],[3,"Metadata"],[3,"Record"],[3,"FrameNumber"],[4,"Ordering"],[3,"PhysicalAddress"],[3,"PageNumber"],[3,"PageRange"],[3,"VirtualAddress"],[3,"PageRangeIterator"],[15,"u8"],[3,"StackFrameAllocator"],[3,"FrameTracker"],[3,"FRAME_ALLOCATOR"],[3,"Layout"],[3,"PTEFlags"],[3,"InternalBitFlags"],[3,"PageTableEntry"],[3,"PageTable"],[8,"IntoIterator"],[3,"Formatter"],[8,"Hasher"],[3,"Iter"],[3,"IterRaw"],[3,"String"],[3,"PageSet"],[3,"MapPermission"],[3,"InternalBitFlags"],[4,"MapType"],[3,"PageSegment"],[3,"KERNEL_SPACE"],[3,"BTreeMap"],[3,"Iter"],[3,"IterRaw"],[3,"UserPtr"],[8,"Clone"],[3,"Event"],[3,"InternalBitFlags"],[15,"u32"],[3,"EventBus"],[3,"Iter"],[3,"IterRaw"],[3,"EventBusFuture"],[8,"Fn"],[3,"MutexGuard"],[3,"SystemCall"],[15,"isize"],[3,"Process"],[3,"INIT_PROCESS"],[3,"PidAllocator"],[3,"PidHandle"],[3,"PID_ALLOCATOR"],[3,"ProcessState"],[4,"Status"],[3,"PROCESS_MAP"],[3,"Weak"],[3,"ThreadState"],[3,"TidAllocator"],[8,"FrameAllocator"]]},\
"kernel_lib":{"doc":"","t":"FAFFFFOOFFFFFFF","n":["_start","console","exec","exit","fork","get_time","print","println","read","sched_yield","wait","waitpid","write","getchar","print"],"q":[[0,"kernel_lib"],[13,"kernel_lib::console"]],"d":["","The <code>console</code> module contains functions that interacts with â€¦","","","","","Print to the debug console.","Print to the debug console, with a newline.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[[],1],0,[2,3],[4,3],[[],3],[[],3],0,0,[5,3],[[],3],[5,3],[[5,5],3],[5,3],[[],6],[7]],"c":[],"p":[[15,"never"],[15,"str"],[15,"isize"],[15,"i32"],[15,"usize"],[15,"u8"],[3,"Arguments"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
